generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [pgcrypto]
}

model user {
  id       String  @id @default(uuid())
  email    String?
  phone    String  @db.VarChar(20)
  password String  @db.VarChar(30)
  name     String
  is_vip   Boolean @default(false)
  rating   Float   @default(5) @db.Real

  rides        ride[]             @relation("ride_client")
  saved_places user_saved_place[] @relation("saved_place_belong_to")
}

model user_saved_place {
  id              String @id @default(uuid())
  user_id         String
  saved_name      String
  google_place_id String
  place_name      String

  user user @relation("saved_place_belong_to", fields: [user_id], references: [id], onDelete: Cascade)
}

model driver {
  id       String @id @default(uuid())
  phone    String @db.VarChar(20)
  password String @db.VarChar(30)
  name     String
  rating   Float  @default(5) @db.Real

  vehicles vehicle[] @relation("vehicle_belong_to")
  rides    ride[]    @relation("ride_driver")
}

enum StaffRole {
  ADMIN
  EMPLOYEE
}

model staff {
  id       String    @id @default(uuid())
  email    String
  password String
  role     StaffRole
}

model vehicle {
  id           String  @id @default(uuid())
  driver_id    String
  plate_number String  @db.VarChar(20)
  model        String
  color        String?
  type         String?

  driver driver @relation("vehicle_belong_to", fields: [driver_id], references: [id], onDelete: Cascade)
  ride   ride[] @relation("ride_vehicle")
}

enum RideStatus {
  BOOKED
  CANCELED
  FINISED
}

enum PaymentType {
  CASH
  CARD
  E_WALLET
}

model ride {
  id           String      @id @default(uuid())
  user_id      String
  driver_id    String
  vehicle_id   String
  fee          Decimal
  payment_type PaymentType

  start_google_place_id String
  start_place_name      String
  end_google_place_id   String
  end_place_name        String

  book_time   DateTime  @default(now())
  arrive_time DateTime?

  status  RideStatus
  client  user       @relation("ride_client", fields: [user_id], references: [id], onDelete: Cascade)
  driver  driver     @relation("ride_driver", fields: [driver_id], references: [id], onDelete: Cascade)
  vehicle vehicle    @relation("ride_vehicle", fields: [vehicle_id], references: [id], onDelete: Cascade)
}
