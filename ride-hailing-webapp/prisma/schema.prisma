generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgcrypto]
}

model user {
  id           String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String?            @unique
  phone        String             @db.VarChar(20)
  name         String
  is_vip       Boolean            @default(false)
  rating       Float              @default(5) @db.Real
  rides        ride[]             @relation("ride_client")
  saved_places user_saved_place[] @relation("saved_place_belong_to")
}

model user_saved_place {
  id              String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  saved_name      String
  google_place_id String
  place_name      String
  user_id         String @db.Uuid
  user            user   @relation("saved_place_belong_to", fields: [user_id], references: [id])
}

model driver {
  id       String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  phone    String    @db.VarChar(20)
  name     String
  rating   Float     @default(5) @db.Real
  email    String?   @unique
  rides    ride[]    @relation("ride_driver")
  vehicles vehicle[] @relation("vehicle_belong_to")
}

model staff {
  id    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email String?   @unique
  role  StaffRole
  name  String
}

model vehicle {
  id           String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  plate_number String  @db.VarChar(10)
  model        String
  color        String?
  type         String?
  driver_id    String  @db.Uuid
  ride         ride[]  @relation("ride_vehicle")
  driver       driver  @relation("vehicle_belong_to", fields: [driver_id], references: [id])
}

model ride {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fee          Decimal
  payment_type PaymentType

  start_lon  Float
  start_lat  Float
  start_name String

  end_lon  Float
  end_lat  Float
  end_name String

  book_time   DateTime   @default(now())
  arrive_time DateTime?
  status      RideStatus @default(BOOKED)

  rating rating? @relation("rated_ride")

  user_id    String   @db.Uuid
  driver_id  String?  @db.Uuid
  vehicle_id String?  @db.Uuid
  driver     driver?  @relation("ride_driver", fields: [driver_id], references: [id])
  vehicle    vehicle? @relation("ride_vehicle", fields: [vehicle_id], references: [id])
  client     user     @relation("ride_client", fields: [user_id], references: [id])
}

model pricing_factor {
  x_distance       Float   @default(1)
  x_estimated_time Float   @default(1)
  weather          Weather @id
  x_4seats         Float   @default(1)
  x_7seats         Float   @default(1)
  x_motorcycle     Float   @default(1)
}

model rating {
  id            String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ride_id       String @unique @db.Uuid
  driver_rating Float  @default(5)
  user_rating   Float  @default(5)
  ride          ride   @relation("rated_ride", fields: [ride_id], references: [id])
}

enum StaffRole {
  ADMIN
  EMPLOYEE
}

enum RideStatus {
  BOOKED
  FINDING_DRIVER
  WAITING_DRIVER
  DRIVER_AT_PICKUP
  TRIP_IS_GOING
  DRIVER_AT_DROP

  CANT_FIND_DRIVER
  DRIVER_CANCELED
  CLIENT_CANCELED
}

enum PaymentType {
  CASH
  CARD
  E_WALLET
}

enum Weather {
  SUNNY
  WINDY
  RAINY
}
